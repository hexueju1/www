apply plugin: "com.android.application"
apply plugin: 'walle'
apply plugin: 'com.mob.sdk'
import com.android.build.OutputFile

/**
 * The react.gradle file registers a task for each build variant (e.g. bundleDebugJsAndAssets
 * and bundleReleaseJsAndAssets).
 * These basically call `react-native bundle` with the correct arguments during the Android build
 * cycle. By default, bundleDebugJsAndAssets is skipped, as in debug/dev mode we prefer to load the
 * bundle directly from the development server. Below you can see all the possible configurations
 * and their defaults. If you decide to add a configuration block, make sure to add it before the
 * `apply from: "../../node_modules/react-native/react.gradle"` line.
 *
 * project.ext.react = [
 *   // the name of the generated asset file containing your JS bundle
 *   bundleAssetName: "index.android.bundle",
 *
 *   // the entry file for bundle generation
 *   entryFile: "index.android.js",
 *
 *   // whether to bundle JS and assets in debug mode
 *   bundleInDebug: false,
 *
 *   // whether to bundle JS and assets in release mode
 *   bundleInRelease: true,
 *
 *   // whether to bundle JS and assets in another build variant (if configured).
 *   // See http://tools.android.com/tech-docs/new-build-system/user-guide#TOC-Build-Variants
 *   // The configuration property can be in the following formats
 *   //         'bundleIn${productFlavor}${buildType}'
 *   //         'bundleIn${buildType}'
 *   // bundleInFreeDebug: true,
 *   // bundleInPaidRelease: true,
 *   // bundleInBeta: true,
 *
 *   // whether to disable dev mode in custom build variants (by default only disabled in release)
 *   // for example: to disable dev mode in the staging build type (if configured)
 *   devDisabledInStaging: true,
 *   // The configuration property can be in the following formats
 *   //         'devDisabledIn${productFlavor}${buildType}'
 *   //         'devDisabledIn${buildType}'
 *
 *   // the root of your project, i.e. where "package.json" lives
 *   root: "../../",
 *
 *   // where to put the JS bundle asset in debug mode
 *   jsBundleDirDebug: "$buildDir/intermediates/assets/debug",
 *
 *   // where to put the JS bundle asset in release mode
 *   jsBundleDirRelease: "$buildDir/intermediates/assets/release",
 *
 *   // where to put drawable resources / React Native assets, e.g. the ones you use via
 *   // require('./image.png')), in debug mode
 *   resourcesDirDebug: "$buildDir/intermediates/res/merged/debug",
 *
 *   // where to put drawable resources / React Native assets, e.g. the ones you use via
 *   // require('./image.png')), in release mode
 *   resourcesDirRelease: "$buildDir/intermediates/res/merged/release",
 *
 *   // by default the gradle tasks are skipped if none of the JS files or assets change; this means
 *   // that we don't look at files in android/ or ios/ to determine whether the tasks are up to
 *   // date; if you have any other folders that you want to ignore for performance reasons (gradle
 *   // indexes the entire tree), add them here. Alternatively, if you have JS files in android/
 *   // for example, you might want to remove it from here.
 *   inputExcludes: ["android/**", "ios/**"],
 *
 *   // override which node gets called and with what additional arguments
 *   nodeExecutableAndArgs: ["node"],
 *
 *   // supply additional arguments to the packager
 *   extraPackagerArgs: []
 * ]
 */

project.ext.react = [
        entryFile: "index.js"
]

apply from: "../../node_modules/react-native/react.gradle"

/**
 * Set this to true to create two separate APKs instead of one:
 *   - An APK that only works on ARM devices
 *   - An APK that only works on x86 devices
 * The advantage is the size of the APK is reduced by about 4MB.
 * Upload all the APKs to the Play Store and people will download
 * the correct one based on the CPU architecture of their device.
 */
def enableSeparateBuildPerCPUArchitecture = false

/**
 * Run Proguard to shrink the Java bytecode in release builds.
 */
def enableProguardInReleaseBuilds = false

repositories {
    flatDir {
        dirs 'libs'
    }
}

MobSDK {
    appKey "2a59105039a1f"
    appSecret "1e7a23b48bcfd976e386d91ce9044368"
    ShareSDK {
        devInfo {
          Wechat {
                appId "wx249f7ce7036fb51c"
                appSecret "1d8b39475f81eed6d73637ba7e433c61"
//                userName "gh_afb25ac019c9"
//                path "pages/index/index.html?id=1"
//                withShareTicket true
                BypassApproval true
//                miniprogramType 2
            }
            Telegram {
                appId "711031950"
                appKey "AAEHVp_CtrTAtC1rQ7tpD8SuEmh__p9yHak"
            }
            WechatMoments {
                appId "wx249f7ce7036fb51c"
                appSecret "1d8b39475f81eed6d73637ba7e433c61"
                BypassApproval true
            }
//            WechatFavorite {
//                appId "wx4868b35061f87885"
//                appSecret "64020361b8ec4c99936c0e3999a9f249"
//            }
        }
    }
}


android {
    signingConfigs {
        release {
            keyAlias 'shandai'
            keyPassword '123456'
            storeFile file('../google.jks')
            storePassword '123456'
        }
        debug {
            keyAlias 'shandai'
            keyPassword '123456'
            storeFile file('../google.jks')
            storePassword '123456'
        }
    }
    compileSdkVersion rootProject.ext.compileSdkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion

    defaultConfig {
        applicationId "com.thinktank.shan2dai"
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode 20003
        versionName "2.0.3"
        ndk {
            abiFilters "armeabi-v7a", "x86"
        }
        multiDexEnabled true
    }
    splits {
        abi {
            reset()
            enable enableSeparateBuildPerCPUArchitecture
            universalApk false  // If true, also generate a universal APK
            include "armeabi-v7a", "x86"
        }
    }
    buildTypes {
        release {
            signingConfig signingConfigs.release
            minifyEnabled enableProguardInReleaseBuilds
            proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"
        }
    }
    sourceSets {
        main { assets.srcDirs = ['src/main/assets', '../../html'] }
    }
    // applicationVariants are e.g. debug, release
    applicationVariants.all { variant ->
        variant.outputs.all { output ->
            // For each separate APK per architecture, set a unique version code as described here:
            // http://tools.android.com/tech-docs/new-build-system/user-guide/apk-splits
            def versionCodes = ["armeabi-v7a": 1, "x86": 2]
            def abi = output.getFilter(OutputFile.ABI)
            if (abi != null) {  // null for the universal-debug, universal-release variants
                output.versionCodeOverride =
                        versionCodes.get(abi) * 1048576 + defaultConfig.versionCode
            }

            def outputFile = output.outputFile
            def fileName = outputFile.name.replace("app", "yingyongbao")
            fileName = fileName.split("\\.")[0]
            outputFileName = fileName + "-${variant.versionName}.apk"
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
}

dependencies {
    implementation project(':react-native-image-picker')
    implementation project(':react-native-linear-gradient')
    implementation project(':@react-native-community_netinfo')
    implementation project(':react-native-splash-screen')
    implementation project(':react-native-fs')
    implementation fileTree(include: ['*.jar'], dir: 'libs')

    implementation project(':react-native-contacts')
    implementation project(':react-native-i18n')
    implementation project(':react-native-device-info')
    implementation project(':@react-native-community_cameraroll')
    implementation project(':react-native-view-shot')
    implementation project(':react-native-svg')
    implementation project(':@yyyyu_react-native-geetest-sensebot')
    implementation project(':react-native-webview')
    implementation project(':@react-native-community_async-storage')
    implementation project(':react-native-update')
    implementation project(':react-native-gesture-handler')
    implementation fileTree(dir: "libs", include: ["*.jar"])
    implementation 'androidx.appcompat:appcompat:1.0.2'
    implementation 'androidx.constraintlayout:constraintlayout:2.0.0-alpha2'
    annotationProcessor 'androidx.annotation:annotation:1.0.0'
//    implementation "com.android.support:appcompat-v7:${rootProject.ext.supportLibVersion}"
//    implementation "com.android.support:support-v4:${rootProject.ext.supportLibVersion}"
    implementation "com.facebook.react:react-native:+"  // From node_modules

    // 多dex配置
    implementation 'androidx.multidex:multidex:2.0.0'
    //    打包
    implementation 'com.meituan.android.walle:library:1.1.6'
//    compile 'com.facebook.fresco:animated-base-support:1.3.0'
// For animated GIF support
    implementation 'com.facebook.fresco:animated-gif:1.10.0'
//    implementation name: 'animated-gif-1.10.0', ext: 'aar'

}

//生成所有渠道包 ./gradlew assembleReleaseChannels     默认用这个，打包之前最好先clean
//生成单个或多个渠道包  ./gradlew assembleReleaseChannels -PchannelList=origin,test
walle {
    // 指定渠道包的输出路径
    apkOutputFolder = new File("${project.buildDir}/outputs/channels")
    // 定制渠道包的APK的文件名称
    apkFileNameFormat = '${appName}-${packageName}-${channel}-${buildType}-v${versionName}-${versionCode}-${buildTime}.apk'
    // 渠道配置文件
    channelFile = new File("${project.getProjectDir()}/channel")
}

// Run this once to be able to run the application with BUCK
// puts all compile dependencies into folder libs for BUCK to use
task copyDownloadableDepsToLibs(type: Copy) {
    from configurations.compile
    into 'libs'
}
